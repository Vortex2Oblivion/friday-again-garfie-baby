<?xml version="1.0" encoding="utf-8"?>
<project xmlns="http://lime.openfl.org/project/1.0.4" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://lime.openfl.org/project/1.0.4 http://lime.openfl.org/xsd/project-1.0.4.xsd">

	<!-- _________________________ Application Settings _________________________ -->

	<app title="friday again garfie baby" file="Funkin" main="funkin.backend.Main" version="0.1.0" company="swordcube" />
	<architecture name="x64" if="android" />

	<!-- ____________________________ Window Settings ___________________________ -->

	<!--These window settings apply to all targets-->
	<window width="1280" height="720" fps="144" background="#000000" hardware="true" vsync="false" />

	<!--Desktop-specific-->
	<window if="desktop" orientation="landscape" fullscreen="false" resizable="true" />

	<!--Mobile-specific-->
	<window if="mobile" orientation="landscape" fullscreen="true" width="0" height="0" />

	<!-- _____________________________ Path Settings ____________________________ -->

	<set name="BUILD_DIR" value="export/debug" if="debug" />
	<set name="BUILD_DIR" value="export/release" unless="debug" />

	<source path="source" />

	<!-- ____________________________ Funkin Defines ____________________________ -->

	<!--
		If TEST_BUILD is defined, we're probably in a dev build lol

		If you define DEV_BUILD without defining TEST_BUILD however,
		assets will load from export folder but have commit watermark
		in the main menu!

		This is mainly for internal stuff, so just define TEST_BUILD
		for your own dev builds and ignore this please <3
	-->
	<define name="DEV_BUILD" if="TEST_BUILD" />

	<!--
		Comment/delete this line below to disable all scripting
		Or compile with the NO_SCRIPTING define, like so:
		
		lime test platform -DNO_SCRIPTING
	-->
	<define name="SCRIPTING_ALLOWED" unless="NO_SCRIPTING || NO_SCRIPTING_ALLOWED" />

	<!--
		Comment/delete this line below to disable HScript
		Or compile with the NO_HSCRIPT define, like so:

		lime test platform -DNO_HSCRIPT
	-->
	<define name="HSCRIPT_ALLOWED" if="SCRIPTING_ALLOWED" unless="NO_HSCRIPT || NO_HSCRIPT_ALLOWED" />

	<!--
		Comment/delete this line below to disable LuaJIT scripts
		Or compile with the NO_LUA define, like so:

		lime test platform -DNO_LUA
	-->
	<define name="LUA_ALLOWED" if="SCRIPTING_ALLOWED cpp" unless="mobile || NO_LUA || NO_LUA_ALLOWED" />

	<!--
		Comment/delete this line below to disable Discord RPC
		Or compile with the NO_DISCORD_RPC define, like so:

		lime test platform -DNO_DISCORD_RPC
	-->
	<define name="DISCORD_ALLOWED" if="windows || mac || linux" unless="NO_DISCORD_RPC || NO_DISCORD || NO_DISCORD_RPC_ALLOWED || NO_DISCORD_ALLOWED" />

	<!--
		Comment/delete this line below to disable video playback
		Or compile with the NO_VIDEOS define, like so:

		lime test platform -DNO_VIDEOS
	-->
	<define name="VIDEOS_ALLOWED" if="cpp" unless="mobile || NO_VIDEOS || NO_VIDEOS_ALLOWED" />

	<!--
		Comment/delete this line below to disable the crash handler
		Or compile with the NO_CRASH_HANDLER define, like so:
		
		lime test platform -DNO_CRASH_HANDLER
	-->
	<define name="CRASH_HANDLER" unless="NO_CRASH_HANDLER || NO_CRASH_HANDLER_ALLOWED" />

	<!--
		Comment/delete this line below to disable the ability to
		return to the main menu after a crash (Windows only)

		Or compile with the NO_WINDOWS_CRASH_HANDLER define, like so:

		lime test platform -DNO_WINDOWS_CRASH_HANDLER
	-->
	<define name="WINDOWS_CRASH_HANDLER" unless="NO_WINDOWS_CRASH_HANDLER || NO_WINDOWS_CRASH_HANDLER_ALLOWED" />

	<!--
		Comment/delete this line below to disable crash log saving
		Or compile with the NO_SAVE_CRASH_LOGS define, like so:

		lime test platform -DNO_SAVE_CRASH_LOGS
	-->
	<define name="SAVE_CRASH_LOGS" if="CRASH_HANDLER" unless="NO_SAVE_CRASH_LOGS || NO_SAVE_CRASH_LOGS_ALLOWED" />

	<!--
		Comment/delete this line below to disable crash log saving
		Or compile with the NO_COMPILE_ALL_CLASSES define, like so:

		lime test platform -DNO_COMPILE_ALL_CLASSES
	-->
	<define name="COMPILE_ALL_CLASSES" if="SCRIPTING_ALLOWED" unless="NO_COMPILE_ALL_CLASSES || DONT_COMPILE_ALL_CLASSES || COMPILE_USED_CLASSES_ONLY" />

	<!--
		Comment/delete this line below to disable Moonchart
		Or compile with the NO_MOONCHART define, like so:

		lime test platform -DNO_MOONCHART
	-->
	<define name="USE_MOONCHART" unless="NO_MOONCHART" />

	<!--
		Comment/delete this line below to disable crash log saving
		Or compile with the NO_MODCHARTING define, like so:

		lime test platform -DNO_MODCHARTING
	-->
	<define name="MODCHARTING_ALLOWED" unless="NO_MODCHARTING || NO_MODCHARTING_ALLOWED" />

	<!--
		Comment/delete this line below to disable case-insensitive file paths on Linux
		Or compile with the NO_MODCHARTING define, like so:

		lime test platform -DNO_MODCHARTING
	-->
	<define name="LINUX_CASE_INSENSITIVE_FILES" if="linux" unless="NO_LINUX_CASE_INSENSITIVE_FILES || LINUX_CASE_SENSITIVE_FILES" />

	<!-- _____________________________ Path Settings ____________________________ -->
	
	<!--
		Don't copy content over if it's a test build
		We'll load from source directory instead of export directory instead
	-->
	<section unless="TEST_BUILD || display || macro">
		<assets path="assets" />
		<assets path="content" />
	</section>

	<!--
		Copy ALSoft configuration to export directory
		This allows for better sounding audio
	-->
	<section if="desktop">
		<assets path="alsoft.ini" rename="plugins/alsoft.ini" type="text" if="windows"/>
		<assets path="alsoft.ini" rename="plugins/alsoft.conf" type="text" unless="windows"/>
	</section>

	<assets path="art/icons/256x.png" rename="icon.png" if="linux || mac"/>

	<!-- _______________________________ Libraries ______________________________ -->

	<!--
		Native File Dialog Library
		
		This is here because Lime's built-in file dialog
		stuff is really broken on Linux and i don't feel
		like trying to fix it because Lime's codebase
		is a massive headache
	-->
	<haxelib name="hxnativefiledialog" if="desktop" />

	<!-- HaxeFlixel -->
	<haxelib name="flixel" />
	<haxelib name="flixel-addons" />
	<haxelib name="flixel-controls" />

	<!-- Loading Animate Atlas -->
	<haxelib name="flixel-animate" />

	<!-- Discord RPC -->
	<haxelib name="hxdiscord_rpc" if="DISCORD_ALLOWED" />

	<!-- Video Playback (via VLC) -->
	<haxelib name="hxvlc" if="VIDEOS_ALLOWED" />

	<!-- Versioning Libraries -->
	<haxelib name="thx.core" />
	<haxelib name="thx.semver" />

	<!-- JSON Parsing (Parses to classes instead of dynamic objects) -->
	<haxelib name="json2object" />

	<!-- Extra chart format support -->
	<haxelib name="moonchart" if="USE_MOONCHART" />

	<!-- Modcharting -->
	<haxelib name="funkin-modchart" if="MODCHARTING_ALLOWED" />

	<!-- Runtime scripting -->
	<section if="SCRIPTING_ALLOWED">
		<!-- The core library for Lua scripting -->
		<haxelib name="linc_luajit" if="LUA_ALLOWED" />

		<!-- The wrapper library for OOP Lua -->
		<haxelib name="lscript" if="LUA_ALLOWED" />

		<!-- The core libraries for Haxe scripting -->
		<haxelib name="hscript" if="HSCRIPT_ALLOWED" />
		<haxelib name="rulescript" if="HSCRIPT_ALLOWED" />
	</section>

	<!-- ______________________________ Haxedefines _____________________________ -->

	<!--Remove the legacy health system-->
	<haxedef name="FLX_NO_HEALTH" />

	<!--Allow for easier support of custom asset loading-->
	<haxedef name="FLX_CUSTOM_ASSETS_DIRECTORY" value="assets" />
	<haxedef name="FLX_CUSTOM_RUNTIME_ASSETS_DIRECTORY" />
	<haxedef name="FLX_NO_VALIDATE_CUSTOM_ASSETS_DIRECTORY" />

	<!--Optimise inputs, be careful you will get null errors if you don't use conditionals in your game-->
	<haxedef name="FLX_NO_MOUSE" if="mobile" />
	<!-- <haxedef name="FLX_NO_KEYBOARD" if="mobile" /> -->
	<haxedef name="FLX_NO_TOUCH" if="desktop" />

	<!--Disable the Flixel core focus lost screen-->
	<haxedef name="FLX_NO_FOCUS_LOST_SCREEN" />

	<!-- Release-build specific defines -->
    <section unless="debug">
        <!--Disable the Flixel core debugger. Automatically gets set whenever you compile in release mode!-->
        <haxedef name="FLX_NO_DEBUG" />
        
        <!--Enable this for Nape release builds for a serious peformance improvement-->
        <haxedef name="NAPE_RELEASE_BUILD" />

        <!-- Crash tracing on release builds -->
		<section if="CRASH_HANDLER">
			<haxedef name="HXCPP_CHECK_POINTER" />
			<haxedef name="HXCPP_STACK_LINE" />
			<haxedef name="HXCPP_STACK_TRACE" />
			<haxedef name="HXCPP_CATCH_SEGV" />
			<haxedef name="openfl-enable-handle-error" />
		</section>
    </section>

	<!-- Enable generational garbage collection -->
	<haxedef name="HXCPP_GC_GENERATIONAL" />

    <!-- Self explanatory i'd say -->
    <haxedef name="no-deprecation-warnings" />

	<!-- Haxe 4.3.0+: Enable pretty syntax errors and stuff. -->
	<!-- pretty (haxeflixel default), indent, classic (haxe compiler default) -->
	<haxedef name="message.reporting" value="pretty" />

	<!-- Better error reporting for HScript -->
	<haxedef name="hscriptPos" if="HSCRIPT_ALLOWED" />
	
	<!-- Disable IO Thread for Discord RPC -->
	<haxedef name="DISCORD_DISABLE_IO_THREAD" if="DISCORD_ALLOWED" />

	<!-- Fixes linux compilation -->
	<haxedef name="NO_PRECOMPILED_HEADERS" />

	<!--
		Experimental OpenFL update queue
		Might increase performance a little bit
	-->
	<define name="openfl_enable_experimental_update_queue" />

	<!--
		Haxe Analyzer Optimization
		TODO: Make this work, LScript for some reason causes a C++ compile error with this enabled!
	-->
	<!-- <define name="analyzer-optimize" /> -->

	<!-- _________________________________ Custom _______________________________ -->

	<section if="COMPILE_ALL_CLASSES">
		<!--Allows unused classes to be compiled, useful for scripting-->
		<haxeflag name="-dce" value="no" if="SCRIPTING_ALLOWED" />
	
		<!--Include most classes into the executable, useful for scripting -->
		<haxeflag name="--macro" value="funkin.backend.macros.IncludeMacro.build()" if="SCRIPTING_ALLOWED" />
	</section>

	<section if="MODCHARTING_ALLOWED">
		<haxedef name="FM_ENGINE" value="Garfie"/>
		<haxedef name="FM_ENGINE_VERSION" value="0.1.0"/>
		<haxeflag name="--macro" value="modchart.backend.macros.Macro.includeFiles()"/>
	</section>

    <!-- Fix compiling issues with local libraries -->
    <setenv name="HAXEPATH" value="./"/>

	<!-- Application Icons -->
	<icon path="art/icons/16x.png" size="16" />

	<icon path="art/icons/32x.png" size="24" />
	<icon path="art/icons/32x.png" size="32" />

	<icon path="art/icons/64x.png" size="40" />
	<icon path="art/icons/64x.png" size="48" />
	<icon path="art/icons/64x.png" size="64" />

	<icon path="art/icons/256x.png" size="96"  />
	<icon path="art/icons/256x.png" size="128"  />
	<icon path="art/icons/256x.png" size="196"  />
	<icon path="art/icons/256x.png" size="256"  />
	<icon path="art/icons/256x.png" size="512"  />
	<icon path="art/icons/256x.png" size="768"  />
	<icon path="art/icons/256x.png" size="1024"  />

	<!-- _________________________________ Android Stuff _______________________________ -->
	 
	<config:android permission="android.permission.READ_EXTERNAL_STORAGE" if="android"/>
	<config:android permission="android.permission.WRITE_EXTERNAL_STORAGE" if="android"/>
</project>
